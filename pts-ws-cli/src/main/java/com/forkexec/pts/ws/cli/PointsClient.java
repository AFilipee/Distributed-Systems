package com.forkexec.pts.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.Map;

import javax.xml.ws.BindingProvider;

import com.forkexec.pts.ws.*;
import com.forkexec.pts.ws.cli.exceptions.InvalidPointsFault_Exception;
import com.forkexec.pts.ws.cli.exceptions.NotEnoughBalanceFault_Exception;
import com.forkexec.pts.ws.cli.exceptions.InvalidEmailFault_Exception;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;

import javax.xml.ws.Response;

import java.util.concurrent.ExecutionException;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class PointsClient {

	/** WS service */
	PointsService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	PointsPortType port = null;

	/** UDDI server URL */
	private String uddiURL = null;

	/** WS name */
	private String wsName = null;

	/** WS end point address */
	private String wsURL = null; // default value is defined inside WSDL

	private PointsFrontEnd ptsFE;

	public String getWsURL() { return wsURL; }

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() { return verbose; }

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public PointsClient(String wsURL) throws PointsClientException {
		this.wsURL = wsURL;
	}

	/** constructor with provided UDDI location and name */
	public PointsClient(String uddiURL, String wsName) throws PointsClientException {
		this.uddiURL = uddiURL;
		this.wsName = wsName;
		this.ptsFE = new PointsFrontEnd(uddiLookup());
	}

	/** UDDI lookup */
	private UDDINaming uddiLookup() throws PointsClientException {
		try {
			if (verbose)
				System.out.printf("Contacting UDDI at %s%n", uddiURL);
			return new UDDINaming(uddiURL);
			
			/*
			UDDINaming uddiNaming = new UDDINaming(uddiURL);

			if (verbose)
				System.out.printf("Looking for '%s'%n", wsName);
			wsURL = uddiNaming.lookup(wsName);
			
			//if (wsURL == null) {
			//	String msg = String.format("Service with name %s not found on UDDI at %s", wsName, uddiURL);
			//	throw new PointsClientException(msg);
			//}

			return uddiNaming;*/

		} catch (Exception e) {
			String msg = String.format("Client failed lookup on UDDI at %s!", uddiURL);
			throw new PointsClientException(msg, e);
		}
	}




	/** [====== Remote invocation methods =======] */
  
	public void activateUser(String email) throws InvalidEmailFault_Exception, EmailAlreadyExistsFault_Exception {
		if (!validEmail(email)) { 
			throw new InvalidEmailFault_Exception("Email is not valid"); }
		this.ptsFE.activateUser(email);
	}

	public int readAsync(String email){
		return this.ptsFE.readAsync(email);
	}

	public String writeAsync(String email, int value){
		return this.ptsFE.writeAsync(email, value);
	}
	
	public int pointsBalance(String email) throws InvalidEmailFault_Exception {
		if (!validEmail(email)){
			throw new InvalidEmailFault_Exception("Email is not valid");
		}
		return readAsync(email);
	}
	
	public int addPoints(String email, int value) throws InvalidPointsFault_Exception, InvalidEmailFault_Exception {
		if (!validEmail(email)) { 
			throw new InvalidEmailFault_Exception("Email is not valid"); }
		if (value <= 0)  { 
			throw new InvalidPointsFault_Exception("Points to add must be a positive integer"); }
		writeAsync(email, value);
		return readAsync(email);
	}

	public int spendPoints(String email, int value) throws InvalidEmailFault_Exception, InvalidPointsFault_Exception, NotEnoughBalanceFault_Exception {
		if (!validEmail(email)) { 
			throw new InvalidEmailFault_Exception("Email is not valid"); }
		if (value <= 0)  { 
			throw new InvalidPointsFault_Exception("Points to add must be a positive integer"); }
		if(readAsync(email) < value) { 
			throw new NotEnoughBalanceFault_Exception("You don't have enough points to spend"); }
	
		writeAsync(email, value*(-1)); 
		return readAsync(email);
	}
	
	public void sleep(int seconds){
		this.ptsFE.sleep(seconds);
	}
	


	/** [====== Auxiliar functions =======] */

	public boolean validEmail(final String email){
		return email.matches("[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}");
	}



	/** [====== Throw operations =======] */
	/*
    private void throwInvalidEmailFault (final String message) throws InvalidEmailFault_Exception {
        final InvalidEmailFault faultInfo = new InvalidEmailFault();
        faultInfo.message = message;
        throw new InvalidEmailFault_Exception(message, faultInfo);
    }
	/*

	/*
 	private void throwInvalidPointsFault (final String message) throws InvalidPointsFault_Exception {
        final InvalidPointsFault faultInfo = new InvalidPointsFault();
        faultInfo.message = message;
        throw new InvalidPointsFault_Exception(message, faultInfo);
	}
	*/

	/*
	private void throwNotEnoughBalanceFault (final String message) throws NotEnoughBalanceFault_Exception {
        final NotEnoughBalanceFault faultInfo = new NotEnoughBalanceFault();
        faultInfo.message = message;
        throw new NotEnoughBalanceFault_Exception(message, faultInfo);
	}
	*/


	/** [====== Control operations =======] */

	public String ctrlPing(String inputMessage) {
		return this.ptsFE.ctrlPing(inputMessage);
	}

	public void ctrlClear() {
		this.ptsFE.ctrlClear();
	}

	public void ctrlInit(int startPoints) throws BadInitFault_Exception {
		this.ptsFE.ctrlInit(startPoints);
	}

}
